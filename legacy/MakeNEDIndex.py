"""
  GP Script Tool - MakeNEDIndex.py
"""
# Make a raster catalog and polygon index to NED tiles in a directory tree. 
# 
# Usage: MakeNEDIndex_NHDPlusBuildRefreshTools <Output_Geodatabase> <Output_Raster_Catalog_Name> 
#                                              <Coordinate_System> <Input_NED_Workspace> <Output_Polygon_Feature_Class>
#        
#
# Description: 
#
# Makes a geodatabase raster catalog plus a polygon feature class containing the footprints of the 
# rasters in the raster catalog. All rasters to be loaded to the raster catalog should be on a common 
# projection and coordinate system. All rasters under the input workspace are loaded, so be sure only
# rasters of a particular type are included in the directory tree under that workspace. The primary 
# purpose of this tool is to create an index to National Elevation Dataset (NED) data, which meets the 
# above constraints. Use for other purposes has not been tested.
#
# Created on: Fri Nov 13 2009 04:25:02 PM
#   (generated by ArcGIS/ModelBuilder)
# Alan Rea, ahrea@usgs.gov, 20091113, original coding
#    updated  20091231, cleanup and commenting
#    updated  20100311, removed hard-coded toolbox reference

import sys, string, os, arcgisscripting

# import egis helper module egis.py from same folder as this script
from egis import *
  
try: 

  # set up geoprocessor
  gp = arcgisscripting.create(9.3)

  # set up GPMsg messaging. If this line is omitted, default is "gp"
  GPMode("both") # valid values: "gp","print","both"
  
  # Script arguments...
  OutLoc = sys.argv[1]  # Output geodatabase for raster catalog and polygon feature class. (type Workspace)
  rcName = sys.argv[2]  # Name for output raster catalog (type String)
  coordsysRaster = sys.argv[3]  # Coordinate system for rasters in raster catalog. Take from one of the NED grids. (type Coordinate System)
  InputNEDWs = sys.argv[4]      # Input NED workspace. All rasters under here are added to raster catalog. (type Workspace)
  OutFC = sys.argv[5]           # Output polygon feature class. (type String)
  
  # Local variables...
  Output_Raster_Catalog = OutLoc + "\\" + rcName
  Raster_Management_Type = "Unmanaged"
  coordsysPolys = coordsysRaster     # Coordinate system for polygon footprints. Use same NED grid to specify. (type Spatial Reference)

  # Test arguments for correct data types and make sure they exist/don't exist as appropriate
  if gp.Exists(OutLoc): 
      DSType = gp.Describe(gp.Describe(OutLoc).CatalogPath).WorkspaceType
      GPMsg("", "Dataset type =" + DSType)
      if DSType == "FileSystem":
        raise MsgError, "Output " + OutLoc + " is not a Geodatabase. Output location must be a Geodatabase."
  else:
    raise MsgError, "Output " + OutLoc + "does not exist"
  
  # Now that we're sure the geodb exists, make it the active workspace
  gp.Workspace = OutLoc
  gp.ScratchWorkspace = OutLoc
  GPMsg("", "Working geodatabase is " + OutLoc)

  if gp.Exists(OutFC): 
    raise MsgError, "Output feature class" + OutFC + "Already exists"

  if gp.Exists(Output_Raster_Catalog): 
    raise MsgError, "Output raster catalog" + Output_Raster_Catalog + "Already exists"

  # Process: Create Raster Catalog...
  GPMsg("", "Creating output raster catalog " + Output_Raster_Catalog)
  gp.CreateRasterCatalog_management(OutLoc, rcName, coordsysRaster, coordsysPolys, "", "0", "0", "0", Raster_Management_Type, "")
  
  # Process: Workspace To Raster Catalog...
  GPMsg("", "Loading all rasters under workspace " + InputNEDWs + " into raster catalog...")
  gp.WorkspaceToRasterCatalog_management(InputNEDWs, Output_Raster_Catalog, "INCLUDE_SUBDIRECTORIES", "NONE")
  
  # Process: Export Raster Catalog paths, then join paths to raster catalog
  GPMsg("", "Getting full pathnames into raster catalog")
  out_table = ScratchName("tmp","tbl","table")
  gp.exportrastercatalogpaths_management (Output_Raster_Catalog, "ALL", out_table)
  gp.joinfield (rcName, "OBJECTID", out_table, "SourceOID", "Path")
  
  # Process: Use Copy Features to make a polygon feature class out of the raster catalog footprints 
  GPMsg("", "Making polygon index of raster catalog...")
  gp.CopyFeatures(rcName, OutFC)
  
  # remove temporary table 
  GPMsg("","Removing temporary table ... ")
  gp.delete_management(out_table)
 

# handle errors and report using GPMsg function
except MsgError, xmsg:
  GPMsg("Error",str(xmsg))
except arcgisscripting.ExecuteError:
  line, file, err = TraceInfo()
  GPMsg("Error","Geoprocessing error on %s of %s:" % (line,file))
  for imsg in range(0, gp.MessageCount):
    if gp.GetSeverity(imsg) == 2:     
      GPMsg("Return",imsg) # AddReturnMessage
except:  
  line, file, err = TraceInfo()
  GPMsg("Error","Python error on %s of %s" % (line,file))
  GPMsg("Error",err)
finally:
  # Clean up here (delete cursors, temp files)
#  gp.delete_management(out_table)
  pass # you need *something* here 
 
